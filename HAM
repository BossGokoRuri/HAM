<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <title>HAM 无线电考试题库</title>
  <style>
    body {
      font-family: 'Microsoft YaHei', sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    h1 {
      text-align: center;
    }
    select {
      font-size: 16px;
      padding: 5px;
      margin-bottom: 20px;
    }
    .question-container {
      background-color: #f5f5f5;
      padding: 20px;
      border-radius: 8px;
    }
    .option {
      padding: 10px;
      background-color: #fff;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .option:hover {
      background-color: #e9e9e9;
    }
    .selected {
      background-color: #d4e6f1;
    }
    .correct {
      background-color: #d4edda;
    }
    .incorrect {
      background-color: #f8d7da;
    }
    .answer-container {
      margin-top: 15px;
      padding: 10px;
      border-radius: 4px;
      display: none;
    }
    .next-btn {
      margin-top: 15px;
      padding: 10px 20px;
      font-size: 16px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .next-btn:hover {
      background-color: #0069d9;
    }
    .progress {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <h1>HAM 无线电考试题库</h1>
  <label for="bank-select">选择题库类型：</label>
  <select id="bank-select">
    <option value="a">A类题库</option>
    <option value="b">B类题库</option>
    <option value="c">C类题库</option>
  </select>

  <div class="progress">
    题目进度: <span id="current">0</span> / <span id="total">0</span>
  </div>

  <div class="question-container">
    <div id="question">请选择题库加载题目</div>
    <div id="options"></div>
    <div class="answer-container" id="answer-container">
      <strong>正确答案：</strong><span id="correct-answer"></span>
      <p id="answer-explanation"></p>
    </div>
    <button class="next-btn" id="next-btn" style="display:none;">下一题</button>
  </div>

  <script type="module">
    const questionEl = document.getElementById('question');
    const optionsEl = document.getElementById('options');
    const answerContainerEl = document.getElementById('answer-container');
    const correctAnswerEl = document.getElementById('correct-answer');
    const answerExplanationEl = document.getElementById('answer-explanation');
    const nextBtn = document.getElementById('next-btn');
    const currentEl = document.getElementById('current');
    const totalEl = document.getElementById('total');
    const bankSelect = document.getElementById('bank-select');

    let questions = [];
    let currentIndex = 0;
    let selectedOption = null;

    async function loadBank(type) {
      let module;
      const path = `./题库/${type}-bank.js`;
      try {
        module = await import(path);
      } catch (e) {
        questionEl.textContent = `无法加载 ${type.toUpperCase()} 类题库`;
        return;
      }

      let raw = module[`${type}Bank`];
      questions = parseQuestionBank(raw);
      questions = shuffleArray(questions);
      currentIndex = 0;
      showQuestion(0);
    }

    bankSelect.addEventListener('change', () => {
      loadBank(bankSelect.value);
    });

    function parseQuestionBank(text) {
      const blocks = text.split('[I]').filter(Boolean);
      const result = [];

      for (let block of blocks) {
        const lines = block.trim().split('\n');
        let id = '', question = '', answer = '', explanation = '', options = {};

        lines.forEach(line => {
          if (line.startsWith('00')) id = line;
          if (line.startsWith('[Q]')) question = line.replace('[Q]', '').trim();
          if (line.startsWith('[A]')) options['A'] = line.replace('[A]', '').trim();
          if (line.startsWith('[B]')) options['B'] = line.replace('[B]', '').trim();
          if (line.startsWith('[C]')) options['C'] = line.replace('[C]', '').trim();
          if (line.startsWith('[D]')) options['D'] = line.replace('[D]', '').trim();
          if (line.startsWith('[R]')) answer = line.replace('[R]', '').trim().toUpperCase();
          if (line.startsWith('[P]')) explanation = line.replace('[P]', '').trim();
        });

        if (question && answer) {
          result.push({ id, question, options, answer, explanation });
        }
      }
      return result;
    }

    function showQuestion(index) {
      if (index >= questions.length) {
        questionEl.textContent = "✅ 所有题目已完成";
        optionsEl.innerHTML = '';
        nextBtn.style.display = 'none';
        return;
      }

      const q = questions[index];
      questionEl.textContent = `${q.id} ${q.question}`;
      optionsEl.innerHTML = '';
      for (let key in q.options) {
        const opt = document.createElement('div');
        opt.className = 'option';
        opt.dataset.option = key;
        opt.textContent = `${key}. ${q.options[key]}`;
        opt.onclick = () => selectOption(key);
        optionsEl.appendChild(opt);
      }

      currentEl.textContent = index + 1;
      totalEl.textContent = questions.length;
      answerContainerEl.style.display = 'none';
      nextBtn.style.display = 'none';
      selectedOption = null;
    }

    function selectOption(option) {
      if (selectedOption) return;

      selectedOption = option;
      const q = questions[currentIndex];

      document.querySelectorAll('.option').forEach(opt => {
        const key = opt.dataset.option;
        opt.classList.remove('selected', 'correct', 'incorrect');
        if (key === option) {
          opt.classList.add(option === q.answer ? 'correct' : 'incorrect');
        }
        if (key === q.answer) {
          opt.classList.add('correct');
        }
      });

      correctAnswerEl.textContent = `${q.answer}. ${q.options[q.answer] || ''}`;
      answerExplanationEl.textContent = q.explanation || '暂无解析';
      answerContainerEl.style.display = 'block';
      nextBtn.style.display = 'inline-block';
    }

    nextBtn.addEventListener('click', () => {
      currentIndex++;
      showQuestion(currentIndex);
    });

    function shuffleArray(arr) {
      return arr.sort(() => Math.random() - 0.5);
    }
  </script>
</body>
</html>
