<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <title>业余无线电考试题库</title>
  <style>
    body {
      font-family: 'Microsoft YaHei', sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      line-height: 1.6;
    }
    .question-container {
      background-color: #f5f5f5;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .options {
      margin-top: 15px;
    }
    .option {
      margin-bottom: 10px;
      padding: 10px;
      background-color: #fff;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .option:hover {
      background-color: #e9e9e9;
    }
    .option.selected {
      background-color: #d4e6f1;
    }
    .correct {
      background-color: #d4edda;
    }
    .incorrect {
      background-color: #f8d7da;
    }
    .answer-container {
      margin-top: 20px;
      padding: 15px;
      border-radius: 4px;
      display: none;
    }
    .next-btn {
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
    }
    .next-btn:hover {
      background-color: #0069d9;
    }
    .progress {
      margin-bottom: 20px;
      font-size: 14px;
      color: #666;
    }
    .error {
      color: red;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h1>业余无线电考试题库（自动加载）</h1>

  <div class="progress">
    题目进度: <span id="current">0</span> / <span id="total">0</span>
  </div>

  <div class="question-container">
    <div id="question">正在加载题库，请稍候...</div>
    <div class="options" id="options"></div>
    <div class="answer-container" id="answer-container">
      <strong>正确答案：</strong><span id="correct-answer"></span>
      <p id="answer-explanation"></p>
    </div>
    <button class="next-btn" id="next-btn" style="display: none;">下一题</button>
  </div>

  <script>
    let currentQuestions = [];
    let currentIndex = 0;
    let selectedOption = null;

    const questionEl = document.getElementById('question');
    const optionsEl = document.getElementById('options');
    const answerContainerEl = document.getElementById('answer-container');
    const correctAnswerEl = document.getElementById('correct-answer');
    const answerExplanationEl = document.getElementById('answer-explanation');
    const nextBtn = document.getElementById('next-btn');
    const currentEl = document.getElementById('current');
    const totalEl = document.getElementById('total');

    // ✅ 自动加载题库
    loadQuestionFile("题库/A类题库.txt");

    async function loadQuestionFile(path) {
      try {
        const response = await fetch(path);
        const buffer = await response.arrayBuffer();
        const text = new TextDecoder("gb18030").decode(buffer);
        currentQuestions = parseQuestionBank(text);
        currentQuestions = shuffleArray(currentQuestions);
        currentIndex = 0;
        showQuestion(currentIndex);
      } catch (err) {
        questionEl.textContent = "❌ 无法加载题库文件：" + err.message;
      }
    }

    function parseQuestionBank(text) {
      const questions = [];
      const blocks = text.split('[I]').filter(b => b.trim());

      blocks.forEach(block => {
        const lines = block.trim().split('\n').filter(line => line.trim());
        if (lines.length < 3) return;

        const id = lines[0].trim();
        const question = lines[1].replace('[Q]', '').trim();
        const options = {};
        let answer = 'A'; // 默认 A
        let hasP = false;

        lines.forEach(line => {
          if (line.startsWith('[A]')) options['A'] = line.replace('[A]', '').trim();
          if (line.startsWith('[B]')) options['B'] = line.replace('[B]', '').trim();
          if (line.startsWith('[C]')) options['C'] = line.replace('[C]', '').trim();
          if (line.startsWith('[D]')) options['D'] = line.replace('[D]', '').trim();
          if (line.startsWith('[P]')) hasP = true;
          if (line.startsWith('[R]')) answer = line.replace('[R]', '').trim().toUpperCase();
        });

        if (Object.keys(options).length === 0) return;

        questions.push({
          id, question, options,
          answer: answer,
          hasExplanation: hasP
        });
      });

      return questions;
    }

    function showQuestion(index) {
      if (index >= currentQuestions.length) {
        questionEl.textContent = '✅ 题库已完成';
        optionsEl.innerHTML = '';
        nextBtn.style.display = 'none';
        return;
      }

      const q = currentQuestions[index];
      questionEl.textContent = `${q.id}. ${q.question}`;
      optionsEl.innerHTML = '';

      for (const key in q.options) {
        const div = document.createElement('div');
        div.className = 'option';
        div.dataset.option = key;
        div.textContent = `${key}. ${q.options[key]}`;
        div.addEventListener('click', () => selectOption(key));
        optionsEl.appendChild(div);
      }

      answerContainerEl.style.display = 'none';
      nextBtn.style.display = 'none';
      currentEl.textContent = index + 1;
      totalEl.textContent = currentQuestions.length;
      selectedOption = null;
    }

    function selectOption(option) {
      if (selectedOption) return;

      selectedOption = option;
      const question = currentQuestions[currentIndex];

      document.querySelectorAll('.option').forEach(el => {
        el.classList.remove('selected', 'correct', 'incorrect');
        if (el.dataset.option === option) {
          el.classList.add('selected');
          if (option === question.answer) {
            el.classList.add('correct');
          } else {
            el.classList.add('incorrect');
          }
        }
        if (el.dataset.option === question.answer) {
          el.classList.add('correct');
        }
      });

      correctAnswerEl.textContent = `${question.answer}. ${question.options[question.answer] || ''}`;
      answerExplanationEl.textContent = question.hasExplanation ? '本题有解析' : '暂无解析';
      answerContainerEl.style.display = 'block';
      nextBtn.style.display = 'inline-block';
    }

    nextBtn.addEventListener('click', () => {
      currentIndex++;
      showQuestion(currentIndex);
    });

    function shuffleArray(array) {
      const newArray = [...array];
      for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
      }
      return newArray;
    }
  </script>
</body>
</html>
